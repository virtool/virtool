name: ci

on:
  merge_group:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"

jobs:
  commitlint:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Commitlint
        uses: wagoid/commitlint-github-action@v5
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
  test:
    runs-on: ubuntu-22.04
    services:
      redis:
        image: redis:6.0
        ports:
          - 6379:6379
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_USER: virtool
          POSTGRES_PASSWORD: virtool
          POSTGRES_DB: virtool
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Start OpenFGA
        run: |
          bash .github/workflows/scripts/setup_postgres.sh          
          docker run --network ${{ job.services.postgres.network }} --rm openfga/openfga:v0.2.5 migrate --datastore-engine postgres --datastore-uri 'postgres://virtool:virtool@postgres:5432/openfga?sslmode=disable'
          docker run -d --name openfga --network=${{ job.services.postgres.network }} -p 8080:8080 openfga/openfga:v0.2.5 run --datastore-engine postgres --datastore-uri 'postgres://virtool:virtool@postgres:5432/openfga?sslmode=disable' --playground-enabled=false
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: 4.4
          mongodb-replica-set: rs
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load Cached Packages
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Packages
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      - name: Install bowtie
        run: | 
          wget https://github.com/BenLangmead/bowtie2/releases/download/v2.5.3/bowtie2-2.5.3-linux-x86_64.zip
          unzip bowtie2-2.5.3-linux-x86_64.zip
          cp -rv bowtie2-2.5.3-linux-x86_64 /opt/bowtie2
          ln -s /opt/bowtie2/bowtie* /usr/local/bin
      - name: Run
        run: >-
          poetry run
          pytest
          --db-connection-string mongodb://localhost:27017
          -n 3
          --openfga-host localhost:8080
          --postgres-connection-string postgresql+asyncpg://virtool:virtool@localhost
          --redis-connection-string redis://localhost:6379
          --snapshot-details
          --snapshot-warn-unused
  oas:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Setup Poetry
        id: setup-poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load Cached Packages
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Packages
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      - name: Write OAS
        run: |
          mkdir -p virtool/spec
          poetry run python run.py oas > virtool/spec/openapi.json
      - name: Upload OAS
        uses: actions/upload-artifact@v4
        with:
          name: openapi.json
          path: virtool/spec/openapi.json
  mypy:
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Setup Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.12'
        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
        - name: Load Cached Packages
          id: cached-poetry-dependencies
          uses: actions/cache@v4
          with:
            path: .venv
            key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        - name: Install Packages
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          run: poetry install --no-interaction
        - name: Run
          continue-on-error: true
          run: poetry run mypy virtool
  release:
    runs-on: ubuntu-22.04
    needs: [build, oas, test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download OAS
        uses: actions/download-artifact@v4
        with:
          name: openapi.json
          path: virtool/spec/openapi.json
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install semantic-release
        run: npm i semantic-release@v23.0.8 conventional-changelog-conventionalcommits@7.0.2
      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_USERNAME: ${{ secrets.GH_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release
