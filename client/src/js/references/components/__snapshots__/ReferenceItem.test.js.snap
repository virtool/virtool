// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ReferenceItem /> renders <ReferenceHeader /> subcomponent correctly 1`] = `
<div
  style={
    Object {
      "marginLeft": "5px",
    }
  }
>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <strong>
      Tester
    </strong>
    <Link
      replace={false}
      style={
        Object {
          "float": "right",
        }
      }
      to={
        Object {
          "state": Object {
            "cloneReference": true,
            "newReference": true,
            "refId": "test-reference-id",
          },
        }
      }
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="clone"
        pullRight={false}
        tip="Clone"
      />
    </Link>
  </Row>
  <Row
    bsClass="row"
    componentClass="div"
  >
    <small>
      Created 
      <RelativeTime
        time="2018-01-01T00:00:00.000000Z"
      />
       by 
      test-user
    </small>
  </Row>
</div>
`;

exports[`<ReferenceItem /> renders <ReferenceMetadata /> subcomponent correctly 1`] = `
<Table
  bordered={true}
  bsClass="table"
  condensed={false}
  hover={false}
  responsive={false}
  striped={false}
>
  <tbody>
    <tr>
      <th>
        Data Type
      </th>
      <td
        className="text-capitalize"
      >
        test-genome
      </td>
    </tr>
    <tr>
      <th>
        Organism
      </th>
      <td
        className="text-capitalize"
      >
        test-virus
      </td>
    </tr>
    <tr>
      <th>
        Imported from
      </th>
      <td>
        test-import
      </td>
    </tr>
    <React.Fragment>
      <tr>
        <th>
          Latest Build
        </th>
        <td>
          <Link
            replace={false}
            to="/refs/test-reference-id/indexes/test-build"
          >
            Index 
            0
          </Link>
          <div
            className="text-muted"
            style={
              Object {
                "fontSize": "12px",
              }
            }
          >
            Created 
            <RelativeTime
              time="2018-01-01T00:00:00.000000Z"
            />
             by 
            test-user
          </div>
        </td>
      </tr>
    </React.Fragment>
  </tbody>
</Table>
`;

exports[`<ReferenceItem /> renders <ReferenceMetadata /> subcomponent correctly 2`] = `
<Table
  bordered={true}
  bsClass="table"
  condensed={false}
  hover={false}
  responsive={false}
  striped={false}
>
  <tbody>
    <tr>
      <th>
        Data Type
      </th>
      <td
        className="text-capitalize"
      >
        test-genome
      </td>
    </tr>
    <tr>
      <th>
        Organism
      </th>
      <td
        className="text-capitalize"
      >
        unknown
      </td>
    </tr>
    <tr>
      <th>
        Cloned from
      </th>
      <td>
        <Link
          replace={false}
          to="/refs/123clone"
        >
          test-clone
        </Link>
      </td>
    </tr>
  </tbody>
</Table>
`;

exports[`<ReferenceItem /> renders <ReferenceMetadata /> subcomponent correctly 3`] = `
<Table
  bordered={true}
  bsClass="table"
  condensed={false}
  hover={false}
  responsive={false}
  striped={false}
>
  <tbody>
    <tr>
      <th>
        Data Type
      </th>
      <td
        className="text-capitalize"
      >
        test-genome
      </td>
    </tr>
    <tr>
      <th>
        Organism
      </th>
      <td
        className="text-capitalize"
      >
        unknown
      </td>
    </tr>
    <tr>
      <th>
        Remotes from
      </th>
      <td>
        <a
          href="https://www.github.com/test-slug"
          rel="noopener noreferrer"
          target="_blank"
        >
          test-slug
        </a>
      </td>
    </tr>
  </tbody>
</Table>
`;

exports[`<ReferenceItem /> renders <ReferenceMetadata /> subcomponent correctly 4`] = `
<Table
  bordered={true}
  bsClass="table"
  condensed={false}
  hover={false}
  responsive={false}
  striped={false}
>
  <tbody>
    <tr>
      <th>
        Data Type
      </th>
      <td
        className="text-capitalize"
      >
        test-genome
      </td>
    </tr>
    <tr>
      <th>
        Organism
      </th>
      <td
        className="text-capitalize"
      >
        unknown
      </td>
    </tr>
    <tr>
      <th>
        Created
      </th>
      <td>
        No File
      </td>
    </tr>
  </tbody>
</Table>
`;

exports[`<ReferenceItem /> renders base component correctly 1`] = `
<Uncontrolled(Panel)
  className="card reference-item"
>
  <PanelHeading
    bsClass="panel"
    componentClass="div"
  >
    <ReferenceHeader
      createdAt="2018-01-01T00:00:00.000000Z"
      name="Tester"
      refId="test-reference-id"
      user="test-user"
    />
  </PanelHeading>
  <ReferenceMetadata
    created_at="2018-01-01T00:00:00.000000Z"
    data_type="test-genome"
    id="test-reference-id"
    name="Tester"
    organism="test-virus"
    origin={
      Object {
        "data": "No File",
        "method": "Created",
      }
    }
    process={
      Object {
        "id": "123abc",
      }
    }
    processes={Array []}
    progress={100}
    user={
      Object {
        "id": "test-user",
      }
    }
  />
  <PanelBody
    bsClass="panel"
    collapsible={false}
    style={
      Object {
        "padding": 0,
        "textAlign": "center",
      }
    }
  >
    <span
      style={
        Object {
          "fontSize": "small",
          "visibility": "hidden",
        }
      }
    >
      None
    </span>
  </PanelBody>
  <ProgressBar
    affixed={true}
    bsStyle="success"
    now={100}
  />
</Uncontrolled(Panel)>
`;

exports[`<ReferenceItem /> renders base component correctly 2`] = `
<Uncontrolled(Panel)
  className="card reference-item"
>
  <PanelHeading
    bsClass="panel"
    componentClass="div"
  >
    <ReferenceHeader
      createdAt="2018-01-01T00:00:00.000000Z"
      name="Tester"
      refId="test-reference-id"
      user="test-user"
    />
  </PanelHeading>
  <ReferenceMetadata
    created_at="2018-01-01T00:00:00.000000Z"
    data_type="test-genome"
    id="test-reference-id"
    name="Tester"
    organism="test-virus"
    origin={
      Object {
        "data": "No File",
        "method": "Created",
      }
    }
    process={
      Object {
        "id": "123abc",
      }
    }
    processes={
      Array [
        Object {
          "id": "123abc",
          "progress": 0.5,
          "step": "test",
        },
      ]
    }
    progress={50}
    user={
      Object {
        "id": "test-user",
      }
    }
  />
  <PanelBody
    bsClass="panel"
    collapsible={false}
    style={
      Object {
        "padding": 0,
        "textAlign": "center",
      }
    }
  >
    <span
      style={
        Object {
          "fontSize": "small",
          "visibility": "visible",
        }
      }
    >
      test
    </span>
  </PanelBody>
  <ProgressBar
    affixed={true}
    bsStyle="warning"
    now={50}
  />
</Uncontrolled(Panel)>
`;

exports[`<ReferenceItem /> renders base component correctly 3`] = `
<Uncontrolled(Panel)
  className="card reference-item"
>
  <PanelHeading
    bsClass="panel"
    componentClass="div"
  >
    <ReferenceHeader
      createdAt="2018-01-01T00:00:00.000000Z"
      name="Tester"
      refId="test-reference-id"
      user="test-user"
    />
  </PanelHeading>
  <ReferenceMetadata
    created_at="2018-01-01T00:00:00.000000Z"
    data_type="test-genome"
    id="test-reference-id"
    name="Tester"
    organism="test-virus"
    origin={
      Object {
        "data": "No File",
        "method": "Created",
      }
    }
    process={
      Object {
        "id": "123abc",
      }
    }
    processes={
      Array [
        Object {
          "id": "345def",
          "progress": 1,
          "step": "test",
        },
      ]
    }
    progress={100}
    user={
      Object {
        "id": "test-user",
      }
    }
  />
  <PanelBody
    bsClass="panel"
    collapsible={false}
    style={
      Object {
        "padding": 0,
        "textAlign": "center",
      }
    }
  >
    <span
      style={
        Object {
          "fontSize": "small",
          "visibility": "hidden",
        }
      }
    >
      None
    </span>
  </PanelBody>
  <ProgressBar
    affixed={true}
    bsStyle="success"
    now={100}
  />
</Uncontrolled(Panel)>
`;

exports[`<ReferenceItem /> renders correctly 1`] = `
<Uncontrolled(Panel)
  className="card reference-item"
  onClick={[Function]}
>
  <PanelHeading
    bsClass="panel"
    componentClass="div"
  >
    <ReferenceHeader
      createdAt="2018-01-01T00:00:00.000000Z"
      name="Tester"
      refId="test-reference-id"
      user="test-user"
    />
  </PanelHeading>
  <ReferenceMetadata
    created_at="2018-01-01T00:00:00.000000Z"
    data_type="test-genome"
    id="test-reference-id"
    name="Tester"
    onClick={[Function]}
    organism="test-virus"
    origin={
      Object {
        "data": "No File",
        "method": "Created",
      }
    }
    process={
      Object {
        "id": "123abc",
      }
    }
    processes={
      Array [
        Object {
          "id": "123abc",
          "progress": 1,
          "step": "test",
        },
      ]
    }
    progress={100}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    user={
      Object {
        "id": "test-user",
      }
    }
  />
  <PanelBody
    bsClass="panel"
    collapsible={false}
    style={
      Object {
        "padding": 0,
        "textAlign": "center",
      }
    }
  >
    <span
      style={
        Object {
          "fontSize": "small",
          "visibility": "hidden",
        }
      }
    >
      test
    </span>
  </PanelBody>
  <ProgressBar
    affixed={true}
    bsStyle="success"
    now={100}
  />
</Uncontrolled(Panel)>
`;
