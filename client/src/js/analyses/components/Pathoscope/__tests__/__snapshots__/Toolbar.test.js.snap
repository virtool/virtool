// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PathoscopeDownloadDropdownTitle /> should render 1`] = `
<span>
  <Icon
    faStyle="fas"
    fixedWidth={false}
    name="file-download"
  />
   Export 
  <Icon
    faStyle="fas"
    fixedWidth={false}
    name="caret-down"
  />
</span>
`;

exports[`<Toolbar /> should render 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="coverage"
    title={
      <DropDownTitle
        sortKey="coverage"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [filterIsolates=false] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="coverage"
    title={
      <DropDownTitle
        sortKey="coverage"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [filterOTUs=false] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="coverage"
    title={
      <DropDownTitle
        sortKey="coverage"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [showPathoscopeReads=true] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="coverage"
    title={
      <DropDownTitle
        sortKey="coverage"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [sortDescending=false] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="coverage"
    title={
      <DropDownTitle
        sortKey="coverage"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [sortKey="depth"] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="depth"
    title={
      <DropDownTitle
        sortKey="depth"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;

exports[`<Toolbar /> should render when [sortKey="weight"] 1`] = `
<Toolbar__StyledPathoscopeToolbar>
  <SearchInput
    onChange={[Function]}
    onKeyDown={[Function]}
  />
  <AnalysisViewerSort
    onSelect={[MockFunction]}
    sortKey="weight"
    title={
      <DropDownTitle
        sortKey="weight"
      />
    }
    type="pathoscope"
  />
  <Button
    color="grey"
    disabled={false}
    onClick={[MockFunction]}
    tip="Sort List"
    tipPlacement="top"
    title="Sort Direction"
    type="button"
  >
    <Icon
      faStyle="fas"
      fixedWidth={false}
      name="sort-amount-down"
    />
  </Button>
  <Button
    active={false}
    color="grey"
    disabled={false}
    icon="weight-hanging"
    onClick={[MockFunction]}
    tip="Show read pseudo-counts instead of weight"
    tipPlacement="top"
    type="button"
  >
    Show Reads
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide OTUs with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter OTUs
  </Button>
  <Button
    active={true}
    color="grey"
    disabled={false}
    icon="filter"
    onClick={[MockFunction]}
    tip="Hide isolates with low coverage support"
    tipPlacement="top"
    type="button"
  >
    Filter Isolates
  </Button>
  <DropdownButton
    id="download-dropdown"
    title={<PathoscopeDownloadDropdownTitle />}
  >
    <DropdownItem
      href="/download/analyses/foo.csv"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-csv"
      />
       CSV
    </DropdownItem>
    <DropdownItem
      href="/download/analyses/foo.xlsx"
    >
      <Icon
        faStyle="fas"
        fixedWidth={false}
        name="file-excel"
      />
       Excel
    </DropdownItem>
  </DropdownButton>
</Toolbar__StyledPathoscopeToolbar>
`;
