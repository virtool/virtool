# serializer version: 1
# name: TestCreateAPIKey.test[False-False]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'key': 'raw_key',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestCreateAPIKey.test[False-True]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
      dict({
        'id': 1,
        'legacy_id': None,
        'name': 'musicians',
      }),
    ]),
    'id': 'foobar_0',
    'key': 'raw_key',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestCreateAPIKey.test[True-False]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'key': 'raw_key',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestCreateAPIKey.test[True-True]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
      dict({
        'id': 1,
        'legacy_id': None,
        'name': 'musicians',
      }),
    ]),
    'id': 'foobar_0',
    'key': 'raw_key',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestCreateAPIKey.test_naming
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_1',
    'key': 'raw_key',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestCreateAPIKey.test_naming.1
  dict({
    '_id': 'hashed_key',
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_1',
    'name': 'Foobar',
    'permissions': dict({
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdate.test_ok[response]
  dict({
    'active': True,
    'administrator_role': None,
    'b2c': None,
    'b2c_display_name': None,
    'b2c_family_name': None,
    'b2c_given_name': None,
    'b2c_oid': None,
    'email': 'virtool.devs@gmail.com',
    'force_reset': False,
    'groups': list([
    ]),
    'handle': 'bob',
    'id': 'bf1b993c',
    'last_password_change': 'approximately_now_isoformat',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'primary_group': None,
    'settings': dict({
      'quick_analyze_workflow': 'nuvs',
      'show_ids': False,
      'show_versions': False,
      'skip_quick_analyze_dialog': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[False-False]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[False-False].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test[False-True]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[False-True].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test[True-False]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[True-False].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test[True-True]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[True-True].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': True,
      'modify_hmm': False,
      'modify_subtraction': True,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test[missing-False]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[missing-False].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test[missing-True]
  dict({
    'created_at': '2015-10-06T20:00:00Z',
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
  })
# ---
# name: TestUpdateAPIKey.test[missing-True].1
  dict({
    '_id': 'foobar',
    'administrator': True,
    'created_at': datetime.datetime(2015, 10, 6, 20, 0),
    'groups': list([
    ]),
    'id': 'foobar_0',
    'name': 'Foobar',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'user': dict({
      'id': 'bf1b993c',
    }),
  })
# ---
# name: TestUpdateAPIKey.test_not_found
  dict({
    'id': 'not_found',
    'message': 'Not found',
  })
# ---
# name: test_get
  dict({
    'active': True,
    'administrator_role': None,
    'b2c': None,
    'b2c_display_name': None,
    'b2c_family_name': None,
    'b2c_given_name': None,
    'b2c_oid': None,
    'email': '',
    'force_reset': False,
    'groups': list([
    ]),
    'handle': 'bob',
    'id': 'bf1b993c',
    'last_password_change': '2015-10-06T20:00:00Z',
    'permissions': dict({
      'cancel_job': False,
      'create_ref': False,
      'create_sample': False,
      'modify_hmm': False,
      'modify_subtraction': False,
      'remove_file': False,
      'remove_job': False,
      'upload_file': False,
    }),
    'primary_group': None,
    'settings': dict({
      'quick_analyze_workflow': 'nuvs',
      'show_ids': False,
      'show_versions': False,
      'skip_quick_analyze_dialog': False,
    }),
  })
# ---
# name: test_get_api_keys
  list([
    dict({
      'created_at': '2015-10-06T20:00:00Z',
      'groups': list([
        dict({
          'id': 1,
          'legacy_id': None,
          'name': 'musicians',
        }),
      ]),
      'id': 'foobar_0',
      'name': 'Foobar',
      'permissions': dict({
        'cancel_job': False,
        'create_ref': False,
        'create_sample': False,
        'modify_hmm': False,
        'modify_subtraction': False,
        'remove_file': False,
        'remove_job': False,
        'upload_file': False,
      }),
    }),
    dict({
      'created_at': '2015-10-06T20:00:00Z',
      'groups': list([
      ]),
      'id': 'baz_1',
      'name': 'Baz',
      'permissions': dict({
        'cancel_job': False,
        'create_ref': False,
        'create_sample': False,
        'modify_hmm': False,
        'modify_subtraction': False,
        'remove_file': False,
        'remove_job': False,
        'upload_file': False,
      }),
    }),
  ])
# ---
# name: test_login[all_valid]
  dict({
    'reset': False,
  })
# ---
# name: test_login[missing_remember]
  dict({
    'reset': False,
  })
# ---
# name: test_login[remember_is_none]
  dict({
    'errors': list([
      dict({
        'field': 'remember',
        'in': 'body',
        'message': 'Input should be a valid boolean',
      }),
    ]),
    'id': 'invalid_input',
    'message': 'Invalid input',
  })
# ---
# name: test_login[wrong_handle]
  dict({
    'id': 'bad_request',
    'message': 'Invalid username or password',
  })
# ---
# name: test_login[wrong_password]
  dict({
    'id': 'bad_request',
    'message': 'Invalid username or password',
  })
# ---
# name: test_login_reset[account/keys-True]
  dict({
    'id': 'unauthorized',
    'message': 'Requires authorization',
  })
# ---
# name: test_login_reset[account/keys-True].1
  dict({
    'id': 'unauthorized',
    'message': 'Requires authorization',
  })
# ---
# name: test_login_reset[account/reset-False]
  dict({
    'id': 'bad_request',
    'message': 'Password does not meet minimum length requirement (8)',
  })
# ---
# name: test_login_reset[account/reset-False].1
  dict({
    'id': 'bad_request',
    'message': 'Invalid session',
  })
# ---
# name: test_login_reset[account/reset-True]
  dict({
    'id': 'bad_request',
    'message': 'Password does not meet minimum length requirement (8)',
  })
# ---
# name: test_login_reset[account/reset-True].1
  dict({
    'login': False,
    'reset': False,
  })
# ---
# name: test_remove_api_key[404]
  dict({
    'id': 'not_found',
    'message': 'Not found',
  })
# ---
# name: test_update_settings[invalid_input][response]
  dict({
    'errors': list([
      dict({
        'field': 'show_ids',
        'in': 'body',
        'message': 'Input should be a valid boolean, unable to interpret input',
      }),
    ]),
    'id': 'invalid_input',
    'message': 'Invalid input',
  })
# ---
# name: test_update_settings[null_values][response]
  dict({
    'errors': list([
      dict({
        'field': 'quick_analyze_workflow',
        'in': 'body',
        'message': "Input should be 'aodp', 'iimi', 'nuvs' or 'pathoscope_bowtie'",
      }),
      dict({
        'field': 'show_ids',
        'in': 'body',
        'message': 'Input should be a valid boolean',
      }),
      dict({
        'field': 'show_versions',
        'in': 'body',
        'message': 'Input should be a valid boolean',
      }),
      dict({
        'field': 'skip_quick_analyze_dialog',
        'in': 'body',
        'message': 'Input should be a valid boolean',
      }),
    ]),
    'id': 'invalid_input',
    'message': 'Invalid input',
  })
# ---
# name: test_update_settings[valid_input][response]
  dict({
    'quick_analyze_workflow': 'pathoscope_bowtie',
    'show_ids': False,
    'show_versions': True,
    'skip_quick_analyze_dialog': True,
  })
# ---
